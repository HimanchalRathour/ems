/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.adjecti.user.model.impl;

import com.adjecti.user.model.Himmu;
import com.adjecti.user.model.HimmuModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Himmu service. Represents a row in the &quot;Himmu_Himmu&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>HimmuModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HimmuImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HimmuImpl
 * @generated
 */
@JSON(strict = true)
public class HimmuModelImpl extends BaseModelImpl<Himmu> implements HimmuModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a himmu model instance should use the <code>Himmu</code> interface instead.
	 */
	public static final String TABLE_NAME = "Himmu_Himmu";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"himmuId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"firstName", Types.VARCHAR}, {"lastName", Types.VARCHAR},
		{"dateOfbirth", Types.VARCHAR}, {"contactNumber", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"streetAddress", Types.VARCHAR},
		{"city", Types.VARCHAR}, {"state_", Types.VARCHAR},
		{"zipCode", Types.VARCHAR}, {"country", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("himmuId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfbirth", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("streetAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zipCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("country", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Himmu_Himmu (uuid_ VARCHAR(75) null,himmuId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,dateOfbirth VARCHAR(75) null,contactNumber VARCHAR(75) null,email VARCHAR(75) null,streetAddress VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zipCode VARCHAR(75) null,country VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Himmu_Himmu";

	public static final String ORDER_BY_JPQL = " ORDER BY himmu.firstName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Himmu_Himmu.firstName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRSTNAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public HimmuModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _himmuId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHimmuId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _himmuId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Himmu.class;
	}

	@Override
	public String getModelClassName() {
		return Himmu.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Himmu, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Himmu, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Himmu, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Himmu)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Himmu, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Himmu, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Himmu)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Himmu, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Himmu, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Himmu, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Himmu, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Himmu, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Himmu, Object>>();
		Map<String, BiConsumer<Himmu, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Himmu, ?>>();

		attributeGetterFunctions.put("uuid", Himmu::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Himmu, String>)Himmu::setUuid);
		attributeGetterFunctions.put("himmuId", Himmu::getHimmuId);
		attributeSetterBiConsumers.put(
			"himmuId", (BiConsumer<Himmu, Long>)Himmu::setHimmuId);
		attributeGetterFunctions.put("groupId", Himmu::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Himmu, Long>)Himmu::setGroupId);
		attributeGetterFunctions.put("companyId", Himmu::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Himmu, Long>)Himmu::setCompanyId);
		attributeGetterFunctions.put("userId", Himmu::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Himmu, Long>)Himmu::setUserId);
		attributeGetterFunctions.put("userName", Himmu::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Himmu, String>)Himmu::setUserName);
		attributeGetterFunctions.put("createDate", Himmu::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Himmu, Date>)Himmu::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Himmu::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Himmu, Date>)Himmu::setModifiedDate);
		attributeGetterFunctions.put("firstName", Himmu::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<Himmu, String>)Himmu::setFirstName);
		attributeGetterFunctions.put("lastName", Himmu::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<Himmu, String>)Himmu::setLastName);
		attributeGetterFunctions.put("dateOfbirth", Himmu::getDateOfbirth);
		attributeSetterBiConsumers.put(
			"dateOfbirth", (BiConsumer<Himmu, String>)Himmu::setDateOfbirth);
		attributeGetterFunctions.put("contactNumber", Himmu::getContactNumber);
		attributeSetterBiConsumers.put(
			"contactNumber",
			(BiConsumer<Himmu, String>)Himmu::setContactNumber);
		attributeGetterFunctions.put("email", Himmu::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Himmu, String>)Himmu::setEmail);
		attributeGetterFunctions.put("streetAddress", Himmu::getStreetAddress);
		attributeSetterBiConsumers.put(
			"streetAddress",
			(BiConsumer<Himmu, String>)Himmu::setStreetAddress);
		attributeGetterFunctions.put("city", Himmu::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<Himmu, String>)Himmu::setCity);
		attributeGetterFunctions.put("state", Himmu::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<Himmu, String>)Himmu::setState);
		attributeGetterFunctions.put("zipCode", Himmu::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode", (BiConsumer<Himmu, String>)Himmu::setZipCode);
		attributeGetterFunctions.put("country", Himmu::getCountry);
		attributeSetterBiConsumers.put(
			"country", (BiConsumer<Himmu, String>)Himmu::setCountry);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getHimmuId() {
		return _himmuId;
	}

	@Override
	public void setHimmuId(long himmuId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_himmuId = himmuId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getDateOfbirth() {
		if (_dateOfbirth == null) {
			return "";
		}
		else {
			return _dateOfbirth;
		}
	}

	@Override
	public void setDateOfbirth(String dateOfbirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfbirth = dateOfbirth;
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@JSON
	@Override
	public String getStreetAddress() {
		if (_streetAddress == null) {
			return "";
		}
		else {
			return _streetAddress;
		}
	}

	@Override
	public void setStreetAddress(String streetAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_streetAddress = streetAddress;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_city = city;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_state = state;
	}

	@JSON
	@Override
	public String getZipCode() {
		if (_zipCode == null) {
			return "";
		}
		else {
			return _zipCode;
		}
	}

	@Override
	public void setZipCode(String zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getCountry() {
		if (_country == null) {
			return "";
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_country = country;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Himmu.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Himmu.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Himmu toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Himmu>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		HimmuImpl himmuImpl = new HimmuImpl();

		himmuImpl.setUuid(getUuid());
		himmuImpl.setHimmuId(getHimmuId());
		himmuImpl.setGroupId(getGroupId());
		himmuImpl.setCompanyId(getCompanyId());
		himmuImpl.setUserId(getUserId());
		himmuImpl.setUserName(getUserName());
		himmuImpl.setCreateDate(getCreateDate());
		himmuImpl.setModifiedDate(getModifiedDate());
		himmuImpl.setFirstName(getFirstName());
		himmuImpl.setLastName(getLastName());
		himmuImpl.setDateOfbirth(getDateOfbirth());
		himmuImpl.setContactNumber(getContactNumber());
		himmuImpl.setEmail(getEmail());
		himmuImpl.setStreetAddress(getStreetAddress());
		himmuImpl.setCity(getCity());
		himmuImpl.setState(getState());
		himmuImpl.setZipCode(getZipCode());
		himmuImpl.setCountry(getCountry());

		himmuImpl.resetOriginalValues();

		return himmuImpl;
	}

	@Override
	public Himmu cloneWithOriginalValues() {
		HimmuImpl himmuImpl = new HimmuImpl();

		himmuImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		himmuImpl.setHimmuId(this.<Long>getColumnOriginalValue("himmuId"));
		himmuImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		himmuImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		himmuImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		himmuImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		himmuImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		himmuImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		himmuImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		himmuImpl.setLastName(this.<String>getColumnOriginalValue("lastName"));
		himmuImpl.setDateOfbirth(
			this.<String>getColumnOriginalValue("dateOfbirth"));
		himmuImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));
		himmuImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		himmuImpl.setStreetAddress(
			this.<String>getColumnOriginalValue("streetAddress"));
		himmuImpl.setCity(this.<String>getColumnOriginalValue("city"));
		himmuImpl.setState(this.<String>getColumnOriginalValue("state_"));
		himmuImpl.setZipCode(this.<String>getColumnOriginalValue("zipCode"));
		himmuImpl.setCountry(this.<String>getColumnOriginalValue("country"));

		return himmuImpl;
	}

	@Override
	public int compareTo(Himmu himmu) {
		int value = 0;

		value = getFirstName().compareTo(himmu.getFirstName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Himmu)) {
			return false;
		}

		Himmu himmu = (Himmu)object;

		long primaryKey = himmu.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Himmu> toCacheModel() {
		HimmuCacheModel himmuCacheModel = new HimmuCacheModel();

		himmuCacheModel.uuid = getUuid();

		String uuid = himmuCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			himmuCacheModel.uuid = null;
		}

		himmuCacheModel.himmuId = getHimmuId();

		himmuCacheModel.groupId = getGroupId();

		himmuCacheModel.companyId = getCompanyId();

		himmuCacheModel.userId = getUserId();

		himmuCacheModel.userName = getUserName();

		String userName = himmuCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			himmuCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			himmuCacheModel.createDate = createDate.getTime();
		}
		else {
			himmuCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			himmuCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			himmuCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		himmuCacheModel.firstName = getFirstName();

		String firstName = himmuCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			himmuCacheModel.firstName = null;
		}

		himmuCacheModel.lastName = getLastName();

		String lastName = himmuCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			himmuCacheModel.lastName = null;
		}

		himmuCacheModel.dateOfbirth = getDateOfbirth();

		String dateOfbirth = himmuCacheModel.dateOfbirth;

		if ((dateOfbirth != null) && (dateOfbirth.length() == 0)) {
			himmuCacheModel.dateOfbirth = null;
		}

		himmuCacheModel.contactNumber = getContactNumber();

		String contactNumber = himmuCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			himmuCacheModel.contactNumber = null;
		}

		himmuCacheModel.email = getEmail();

		String email = himmuCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			himmuCacheModel.email = null;
		}

		himmuCacheModel.streetAddress = getStreetAddress();

		String streetAddress = himmuCacheModel.streetAddress;

		if ((streetAddress != null) && (streetAddress.length() == 0)) {
			himmuCacheModel.streetAddress = null;
		}

		himmuCacheModel.city = getCity();

		String city = himmuCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			himmuCacheModel.city = null;
		}

		himmuCacheModel.state = getState();

		String state = himmuCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			himmuCacheModel.state = null;
		}

		himmuCacheModel.zipCode = getZipCode();

		String zipCode = himmuCacheModel.zipCode;

		if ((zipCode != null) && (zipCode.length() == 0)) {
			himmuCacheModel.zipCode = null;
		}

		himmuCacheModel.country = getCountry();

		String country = himmuCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			himmuCacheModel.country = null;
		}

		return himmuCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Himmu, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Himmu, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Himmu, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Himmu)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Himmu>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Himmu.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _himmuId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private String _dateOfbirth;
	private String _contactNumber;
	private String _email;
	private String _streetAddress;
	private String _city;
	private String _state;
	private String _zipCode;
	private String _country;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Himmu, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Himmu)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("himmuId", _himmuId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("dateOfbirth", _dateOfbirth);
		_columnOriginalValues.put("contactNumber", _contactNumber);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("streetAddress", _streetAddress);
		_columnOriginalValues.put("city", _city);
		_columnOriginalValues.put("state_", _state);
		_columnOriginalValues.put("zipCode", _zipCode);
		_columnOriginalValues.put("country", _country);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("state_", "state");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("himmuId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("firstName", 256L);

		columnBitmasks.put("lastName", 512L);

		columnBitmasks.put("dateOfbirth", 1024L);

		columnBitmasks.put("contactNumber", 2048L);

		columnBitmasks.put("email", 4096L);

		columnBitmasks.put("streetAddress", 8192L);

		columnBitmasks.put("city", 16384L);

		columnBitmasks.put("state_", 32768L);

		columnBitmasks.put("zipCode", 65536L);

		columnBitmasks.put("country", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Himmu _escapedModel;

}